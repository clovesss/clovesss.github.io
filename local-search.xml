<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/08/18/04.npm%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/08/18/04.npm%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="npm-🐟包"><a href="#npm-🐟包" class="headerlink" title="npm 🐟包"></a>npm 🐟包</h1><blockquote><p>从<a href="https://www.npmjs.com/">全球最大的包共享平台</a>网站搜索自己需要的包。</p></blockquote><p>在终端中使用**<code>npm -v</code>** 命令，查看本机 npm 包管理工具的版本号 ，它会随着 Node.js 的安装同时安装到计算机上。</p><h2 id="一、npm-包的安装"><a href="#一、npm-包的安装" class="headerlink" title="一、npm 包的安装"></a>一、npm 包的安装</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install 包<span class="hljs-number">1</span> 包<span class="hljs-number">2</span><br>npm i 包的名称<br>npm i 包名<span class="hljs-selector-tag">@</span>版本号<br><span class="hljs-comment"># 提供 -g 参数，就是 安装/卸载 全局包</span><br></code></pre></td></tr></table></figure><h2 id="二、npm-包的卸载"><a href="#二、npm-包的卸载" class="headerlink" title="二、npm 包的卸载"></a>二、npm 包的卸载</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm uninstall 包名<br></code></pre></td></tr></table></figure><h2 id="三、包管理配置文件"><a href="#三、包管理配置文件" class="headerlink" title="三、包管理配置文件"></a>三、包管理配置文件</h2><p>初次安装 npm 包时会在当前目录生成 <strong>node_modules</strong> 文件夹和 <strong>package-lock.json</strong> 的配置文件* </p><blockquote><p><em>node_modules 文件夹用来存放所有已安装到项目中的包。require() 导入第三方包时，就是从这个目录中查找并加载包。                 package-lock.json 配置文件用来记录 node_modules 目录下的每一个包的下载信息，例如包的名字、版本号、下载地址等。</em></p></blockquote><p>一般来说，我们要在项目根目录中，创建一个叫做 <strong>package.json</strong> 的配置文件，即可用来记录项目中安装了哪些包，方便源代码的共享。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm init -y<br></code></pre></td></tr></table></figure><blockquote><p>注意：该命令只能在英文的目录下成功运行，也不能出现空格。</p></blockquote><p>当拿到剔除 <strong>node_modules</strong> 文件夹的项目时，我们可以使用 <strong><code>npm install(i)</code></strong> 它会先读取 <strong>package.json</strong> 中的 dependencies 节点（核心依赖包），一次性安装所有的依赖包。</p><h2 id="四、devDependencies-节点"><a href="#四、devDependencies-节点" class="headerlink" title="四、devDependencies 节点"></a>四、devDependencies 节点</h2><p>安装指定的包，并记录到 <strong>devDependencies 节点</strong>(开发依赖包)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm i 包名 <span class="hljs-literal">-D</span>   <span class="hljs-comment"># 安装到 开发依赖包</span><br>npm i <span class="hljs-literal">-D</span> 包名<br></code></pre></td></tr></table></figure><h2 id="五、淘宝-NPM-镜像服务器"><a href="#五、淘宝-NPM-镜像服务器" class="headerlink" title="五、淘宝 NPM 镜像服务器"></a>五、淘宝 NPM 镜像服务器</h2><blockquote><p>— 解决下包速度慢问题</p></blockquote><h3 id="切换-npm-的下包源"><a href="#切换-npm-的下包源" class="headerlink" title="切换 npm 的下包源"></a>切换 npm 的下包源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看当前下包源</span><br>npm config get registry<br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换为淘宝镜像源</span><br>npm config set registry=https://registry.npm.taobao.org/<br></code></pre></td></tr></table></figure><blockquote><p>代码太长~</p><p>想更方便切换🐎~</p><p>我们可以安装 nrm 小工具，快速查看和切换镜像源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装 nrm 工具为全局可用</span><br>npm i nrm -g<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看可用的镜像源</span><br>nrm ls<br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换镜像源</span><br>nrm use taobao<br></code></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Git的使用</title>
    <link href="/2022/07/31/03.%20Git%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/07/31/03.%20Git%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Git-的基本操作"><a href="#一、Git-的基本操作" class="headerlink" title="一、Git 的基本操作"></a>一、Git 的基本操作</h1><h3 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">--global 表示全局</span><br>git config --global user.name &quot;名字&quot;<br>git config --global user.email &quot;邮箱&quot;<br></code></pre></td></tr></table></figure><h3 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看全局配置项</span><br>git config --list (--global)<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看指定的全局配置项</span><br>git config user.name<br>git config user.email<br></code></pre></td></tr></table></figure><h3 id="获取帮助信息"><a href="#获取帮助信息" class="headerlink" title="获取帮助信息"></a>获取帮助信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config -h<br></code></pre></td></tr></table></figure><h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><ol><li><p>在项目目录中，右键  “Git bash here”</p></li><li><p>&#96;&#96;&#96;shell<br>git init</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>### 检查文件的状态<br><br>```shell<br>git status  # 详细信息<br>git status -s  # 精简的信息<br>git status --short<br></code></pre></td></tr></table></figure></li></ol><h3 id="git-add-命令"><a href="#git-add-命令" class="headerlink" title="git add 命令"></a>git add 命令</h3><ol><li><p><strong>跟踪新文件</strong></p></li><li><p>把<strong>已跟踪的</strong>、<strong>且已修改</strong>的文件放到暂存区</p></li><li><p>把有冲突的文件标记为已解决状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add index.html<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果文件过多，你想 跟踪目录下所有文件 （放入暂存区）</span><br>git add .<br></code></pre></td></tr></table></figure></li></ol><h3 id="提交更新"><a href="#提交更新" class="headerlink" title="提交更新"></a>提交更新</h3><p>（提交已暂存的文件）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git commit -m &quot;添加提交的信息&quot;<br></code></pre></td></tr></table></figure><h3 id="撤销对文件修改"><a href="#撤销对文件修改" class="headerlink" title="撤销对文件修改"></a>撤销对文件修改</h3><p>（恢复仓库的文件版本）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout -- index.heml<br></code></pre></td></tr></table></figure><h3 id="向暂存区添加多个文件"><a href="#向暂存区添加多个文件" class="headerlink" title="向暂存区添加多个文件"></a>向暂存区添加多个文件</h3><p>一次性将所有的新增和修改过的文件加入暂存区，今后使用较多</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add .<br></code></pre></td></tr></table></figure><h3 id="取消暂存的文件"><a href="#取消暂存的文件" class="headerlink" title="取消暂存的文件"></a>取消暂存的文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">移除 index.html 文件</span><br>git reset HEAD index.html<br><span class="hljs-meta prompt_"># </span><span class="language-bash">移除暂存区所有文件</span><br>git reset HEAD .<br></code></pre></td></tr></table></figure><h3 id="跳过使用暂存区"><a href="#跳过使用暂存区" class="headerlink" title="跳过使用暂存区"></a>跳过使用暂存区</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git commit -a -m &quot;描述消息&quot;<br></code></pre></td></tr></table></figure><h3 id="移除文件"><a href="#移除文件" class="headerlink" title="移除文件"></a>移除文件</h3><p>从 Git 仓库中移除文件的方式有两种：</p><p>① 从 Git 仓库和工作区中<strong>同时移除</strong>对应的文件</p><p>② 只从 Git 仓库中移除指定的文件，但保留工作区中对应的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">工作区和仓库都移除文件</span><br>git rm -f index.js<br><span class="hljs-meta prompt_"># </span><span class="language-bash">只移除仓库，不移除工作区文件</span><br>git rm --cached index.css<br></code></pre></td></tr></table></figure><h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><p>我们可以创建一个名为 <code>.gitignore</code> 的配置文件，列出要忽略的文件的匹配模式。</p><p>文件 <code>.gitignore</code> 的格式规范如下：</p><p>① 以 <strong># 开头</strong>的是注释</p><p>② 以 <strong>&#x2F; 结尾</strong>的是目录</p><p>③ 以 <strong>&#x2F; 开头</strong>防止递归</p><p>④ 以 <strong>! 开头</strong>表示取反</p><p>⑤ 可以使用 <strong>glob 模式</strong>进行文件和文件夹的匹配（glob 指简化了的正则表达式）</p><ul><li><p><strong>星号 *</strong> 匹配<strong>零个或多个任意字符</strong></p></li><li><p><strong><code>[abc]</code></strong> 匹配<strong>任何一个列在方括号中的字符</strong> （此案例匹配一个 a 或匹配一个 b 或匹配一个 c） </p></li><li><p><strong>问号 ?</strong> 只匹配<strong>一个任意字符</strong></p></li><li><p><strong>两个星号 *</strong>* 表示匹配<strong>任意中间目录</strong>（比如 a&#x2F;**&#x2F;z 可以匹配 a&#x2F;z 、 a&#x2F;b&#x2F;z 或 a&#x2F;b&#x2F;c&#x2F;z 等）</p></li><li><p>在方括号中使用<strong>短划线</strong>分隔两个字符， 表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）</p><p><code>.gitignore</code><strong>文件示例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">忽略所有的 .a 文件, 但是不忽略 lib.a</span><br>*.a<br>!lib.a<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">只忽略当前目录下的 TODO 文件，不忽略 reg/TODO</span> <br>/TODO<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">忽略任何目录下的 Build 文件夹</span><br>Build/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">忽略 doc/ws.txt, 但不忽略 doc/log/ws.txt</span><br>doc/*.txt<br><span class="hljs-meta prompt_"># </span><span class="language-bash">忽略 doc文件夹下及其所有子目录下的 .pdf</span><br>doc/**/*.pdf<br></code></pre></td></tr></table></figure></li></ul><h3 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs SHELL"><span class="hljs-meta prompt_"># </span><span class="language-bash">按时间先后顺序列出所有的提交历史，最近的提交在最上面</span><br>git log<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">只展示最新的两条提交历史，数字可以按需进行填写</span><br>git log -2<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在一行上展示最近两条提交历史的信息</span><br>git log -2 --pretty=oneline<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在一行上展示最近两条提交历史信息，并自定义输出的格式</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">&amp;h 提交的简写哈希值  %an 作者名字  %ar 作者修订日志  %s 提交说明</span><br>git log -2 --pretty=format:&quot;%h | %an | %ar | %s&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">提交后的自定义信息显示为：</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">fotmat:3d07c79 | clovesss | 5 minutes ago | 创建了git忽略文件</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">fotmat:b6e8dbe | clovesss | 24 minutes ago | 从仓库中移除了.css .js</span><br></code></pre></td></tr></table></figure><h3 id="回退到指定的版本"><a href="#回退到指定的版本" class="headerlink" title="回退到指定的版本"></a>回退到指定的版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在一行上展示所有的提交历史</span><br>git log --pretty=oneline<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用 git reset --hard 命令，根据指定的提交 ID 回退到指定版本</span><br>git reset --hard &lt;CommitID&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在旧版本中使用 git reflog --pretty=oneline 命令，查看命令操作的历史</span><br>git reflog --pretty=onelone<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">再次根据最新的提交 ID，跳转到最新的版本</span><br>git reset --hard &lt;CommitID&gt;<br></code></pre></td></tr></table></figure><h1 id="二、上传至-Github-仓库"><a href="#二、上传至-Github-仓库" class="headerlink" title="二、上传至 Github 仓库"></a>二、上传至 Github 仓库</h1><h3 id="基于SSH-key将本地仓库上传到Github"><a href="#基于SSH-key将本地仓库上传到Github" class="headerlink" title="基于SSH key将本地仓库上传到Github"></a>基于<code>SSH key</code>将本地仓库上传到Github</h3><h4 id="配置-SSH-访问"><a href="#配置-SSH-访问" class="headerlink" title="配置 SSH 访问"></a>配置 <code>SSH</code> 访问</h4><p><strong>生成 <code>SSH key</code></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -b 4096 -C &quot;注册Github时的邮箱&quot;`<br></code></pre></td></tr></table></figure><p>连续敲击 3 次回车，即可在 <code>C:\Users\用户名文件夹\.ssh</code> 目录中生成 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件</p><p><strong>配置<code>SSH key</code></strong></p><ol><li>从 <code>id_rsa.pub</code> 文件中复制 <code>key</code> 内容</li><li>在 Github 的 <code>SSH and GPG keys</code> 设置项中添加该 <code>key</code></li></ol><h4 id="是否配置成功"><a href="#是否配置成功" class="headerlink" title="是否配置成功"></a>是否配置成功</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p><em><strong><a href="">上传到 Github 操作类似 基于<code>HTTPS</code>的上传 ，把https地址修改为 SSH 地址即可 </a></strong></em></p><h3 id="基于HTTPS将本地仓库上传到Github"><a href="#基于HTTPS将本地仓库上传到Github" class="headerlink" title="基于HTTPS将本地仓库上传到Github"></a>基于<code>HTTPS</code>将本地仓库上传到Github</h3><blockquote><ol><li><p>本地仓库和远程仓库连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote add origin https://github.com/clovesss/proj.git<br></code></pre></td></tr></table></figure></li><li><p>本地内容推送到远程的 <strong><code>origin</code></strong> 仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch -M main<br>git push -u origin main<br></code></pre></td></tr></table></figure></li><li><p>以后提交可以直接使用 <code>git push</code></p></li></ol></blockquote><h3 id="把远程仓库克隆到本地"><a href="#把远程仓库克隆到本地" class="headerlink" title="把远程仓库克隆到本地"></a>把远程仓库克隆到本地</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone 远程仓库的地址<br></code></pre></td></tr></table></figure><h1 id="三、Git分支"><a href="#三、Git分支" class="headerlink" title="三、Git分支"></a>三、Git分支</h1><h3 id="查看分支列表"><a href="#查看分支列表" class="headerlink" title="查看分支列表"></a>查看分支列表</h3><blockquote><p>分支名字前面的 ***** 号表示当前所处的分支。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建新分支  （新分支中的代码和当前分支完全一样）</span><br>git branch 分支名称<br></code></pre></td></tr></table></figure><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout 要切换的分支名称<br></code></pre></td></tr></table></figure><h3 id="快速创建切换"><a href="#快速创建切换" class="headerlink" title="快速创建切换"></a>快速创建切换</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git chenckout -b 分支名称<br></code></pre></td></tr></table></figure><h3 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h3><blockquote><p> 先切换到 master 分支 ，不能再本分支上删除本分支</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout master<br></code></pre></td></tr></table></figure></blockquote></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git merge 合并的分支名称<br></code></pre></td></tr></table></figure><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><blockquote><p>不能再本分支上删除本分支</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch -d 删除的分支名称<br>git branch -D(表示强制删除) 删除的分支名称<br></code></pre></td></tr></table></figure><h3 id="遇到冲突时的分支合并"><a href="#遇到冲突时的分支合并" class="headerlink" title="遇到冲突时的分支合并"></a>遇到冲突时的分支合并</h3><blockquote><p>如果<strong>在两个不同的分支中</strong>，对<strong>同一个文件</strong>进行了<strong>不同的修改</strong>，Git 就没法干净的合并它们。 此时，我们需要打开这些包含冲突的文件然后<strong>手动解决冲突</strong>。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">打开包含冲突的文件，手动解决冲突之后，再执行如下命令</span> <br>git add .<br>git commit -m &quot;解决了分支合并冲突的问题&quot;<br></code></pre></td></tr></table></figure><h1 id="四、远程分支"><a href="#四、远程分支" class="headerlink" title="四、远程分支"></a>四、远程分支</h1><h3 id="将本地分支推送到远程仓库"><a href="#将本地分支推送到远程仓库" class="headerlink" title="将本地分支推送到远程仓库"></a>将本地分支推送到远程仓库</h3><p>第一次推送分支时，需要带 <strong><code>-u</code></strong> 参数，此后直接使用 <strong><code>git push</code></strong> 推送代码到远程分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">-u 表示把本地分支和远程分支进行关联，只在第一次推送的时候需要带 -u 参数</span><br>git push -u 远程仓库的别名(默认为origin) 本地分支名称:远程分支名称<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果希望远程分支的名称和本地分支名称保持一致，可以对命令进行简化</span><br>git push -u origin 本地分支名称<br></code></pre></td></tr></table></figure><h3 id="查看远程仓库中的分支列表"><a href="#查看远程仓库中的分支列表" class="headerlink" title="查看远程仓库中的分支列表"></a>查看远程仓库中的分支列表</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote show 远程仓库名称(默认为origin)<br></code></pre></td></tr></table></figure><h3 id="跟踪分支"><a href="#跟踪分支" class="headerlink" title="跟踪分支"></a>跟踪分支</h3><p>说明：就是从远程仓库，把远程分支下载到本地仓库中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">使本地分支和远程分支名称相同，使用</span><br>git checkout 远程分支的名称<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如下</span><br>git checkout login<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">把下载的本地分支进行重命名</span><br>git checkout -b 本地分支名称 远程仓库名称/远程分支名称<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如下</span><br>git checkout -b LoginParts origin/login<br></code></pre></td></tr></table></figure><h3 id="拉取远程分支的最新代码"><a href="#拉取远程分支的最新代码" class="headerlink" title="拉取远程分支的最新代码"></a>拉取远程分支的最新代码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git pull<br></code></pre></td></tr></table></figure><h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push origin(默认远程仓库名称) --delete 远程分支名称<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如下</span><br>git push origin --delete reg<br></code></pre></td></tr></table></figure><h1 id="五、使用流程"><a href="#五、使用流程" class="headerlink" title="五、使用流程"></a>五、使用流程</h1><h2 id="使用场景1-把电脑上的本地项目推送到远程仓库"><a href="#使用场景1-把电脑上的本地项目推送到远程仓库" class="headerlink" title="使用场景1: 把电脑上的本地项目推送到远程仓库"></a>使用场景1: 把电脑上的本地项目推送到远程仓库</h2><ol><li><h5 id="直接在本地建仓（初始化）"><a href="#直接在本地建仓（初始化）" class="headerlink" title="直接在本地建仓（初始化）"></a><strong>直接在本地建仓（初始化）</strong></h5><blockquote><p>一般习惯是在初始化后就与远程仓库链接</p></blockquote><p><code>git init</code></p></li><li><h5 id="查看文件是否已经提交-若没有，则提交到本地仓库"><a href="#查看文件是否已经提交-若没有，则提交到本地仓库" class="headerlink" title="查看文件是否已经提交   (若没有，则提交到本地仓库)"></a>查看文件是否已经提交   (<em>若没有，则提交到本地仓库</em>)</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git status -s    # 查看当前文件状态<br>git add .<br>git commit -m &quot;20220805_first_commit&quot;<br></code></pre></td></tr></table></figure><blockquote><p>2，3两行代码可以写为如下（即跳过使用暂存区，直接提交到本地仓库）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git commit -a -m &quot;20220805_first_commit&quot;<br></code></pre></td></tr></table></figure></li><li><h5 id="两种方式-SSH-与-HTTP-上传仓库到Git-x2F-Gitee"><a href="#两种方式-SSH-与-HTTP-上传仓库到Git-x2F-Gitee" class="headerlink" title="两种方式( SSH 与 HTTP)上传仓库到Git&#x2F;Gitee"></a>两种方式( SSH 与 HTTP)上传仓库到Git&#x2F;Gitee</h5><p>建立本地与远程的连接 <strong>(<em>远程仓库需要建立好，拿到远程仓库的地址</em>)</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote add origin  https://github.com/.....   <br></code></pre></td></tr></table></figure><p> 推本地仓库内容到远程仓库  ()</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">git branch -m main    # 修改 git 默认分支 master 为 main<br>git push -u origin main<br></code></pre></td></tr></table></figure><blockquote><p>或者直接写  <code>git push -u origin master</code></p></blockquote><p><strong>⭐ 注意！</strong> 以后推送该本地仓库内容时只需要 <code>git push</code></p></li></ol><h2 id="使用场景2：多人合作项目里的-git-操作流程"><a href="#使用场景2：多人合作项目里的-git-操作流程" class="headerlink" title="使用场景2：多人合作项目里的 git 操作流程"></a>使用场景2：多人合作项目里的 git 操作流程</h2><p>⭐<strong>注意！</strong>项目庞大时采用<strong>分支管理</strong></p><ol><li><h5 id="把远程仓库克隆到本地-1"><a href="#把远程仓库克隆到本地-1" class="headerlink" title="把远程仓库克隆到本地"></a>把远程仓库克隆到本地</h5><blockquote><p>因为是 clone ，已经有了本地与远程的连接</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone git@gitee.com:.......<br></code></pre></td></tr></table></figure></li><li><h5 id="拉取远程仓库的代码（保证在克隆后的时间里没有其他人上传代码）"><a href="#拉取远程仓库的代码（保证在克隆后的时间里没有其他人上传代码）" class="headerlink" title="拉取远程仓库的代码（保证在克隆后的时间里没有其他人上传代码）"></a>拉取远程仓库的代码（保证在克隆后的时间里没有其他人上传代码）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git pull origin master<br></code></pre></td></tr></table></figure><p><strong>⭐ 注意！</strong>克隆是复制整个项目文件夹下来，拉取则是获取到最新文件并且更新到</p><p>之前克隆的文件夹里</p></li><li><h5 id="编辑文件后，重新三部曲-保证文件全部提交到了本地仓库"><a href="#编辑文件后，重新三部曲-保证文件全部提交到了本地仓库" class="headerlink" title="编辑文件后，重新三部曲  (保证文件全部提交到了本地仓库)"></a>编辑文件后，重新三部曲  (保证文件全部提交到了本地仓库)</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git status -s    # 查看当前文件状态<br>git add .<br>git commit -m &quot;20220805_first_commit&quot;<br></code></pre></td></tr></table></figure></li><li><h5 id="（多人合作项目）-在提交前，必须再次拉取仓库的最新代码）"><a href="#（多人合作项目）-在提交前，必须再次拉取仓库的最新代码）" class="headerlink" title="（多人合作项目） 在提交前，必须再次拉取仓库的最新代码）"></a>（多人合作项目） 在提交前，必须再次拉取仓库的最新代码）</h5></li><li><h5 id="（若存在冲突，解决后还需再次三部曲，把文件提交到本地仓库）"><a href="#（若存在冲突，解决后还需再次三部曲，把文件提交到本地仓库）" class="headerlink" title="（若存在冲突，解决后还需再次三部曲，把文件提交到本地仓库）"></a>（若存在冲突，解决后还需再次三部曲，把文件提交到本地仓库）</h5></li><li><h5 id="push本地仓库内容至远程仓库"><a href="#push本地仓库内容至远程仓库" class="headerlink" title="push本地仓库内容至远程仓库"></a>push本地仓库内容至远程仓库</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push -u origin master<br></code></pre></td></tr></table></figure><p><strong>⭐ 注意！</strong> 以后推送该本地仓库内容时只需要 <code>git push</code></p></li></ol><h1 id="未完待续……"><a href="#未完待续……" class="headerlink" title="未完待续……"></a>未完待续……</h1>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
      <category>Git分支</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>branch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown基本语法</title>
    <link href="/2022/06/03/01.%20Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2022/06/03/01.%20Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Markdown 是一种<a href="https://baike.baidu.com/item/%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/52671915">轻量级标记语言</a>，创始人为约翰·格鲁伯（John Gruber）。 它允许人们使用易读易写的<a href="https://baike.baidu.com/item/%E7%BA%AF%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F/9862288">纯文本格式</a>编写文档，然后转换成有效的 <a href="https://baike.baidu.com/item/XHTML/316621">XHTML</a>（或者HTML）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。</p><p>由于 Markdown 的轻量化、易读易写特性，并且对于图片，图表、数学式都有支持，许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。 如 <a href="https://baike.baidu.com/item/GitHub/10145341">GitHub</a>、<a href="https://baike.baidu.com/item/Reddit/1272010">Reddit</a>、<a href="https://baike.baidu.com/item/Diaspora/10726893">Diaspora</a>、[Stack Exchange](<a href="https://baike.baidu.com/item/Stack">https://baike.baidu.com/item/Stack</a> Exchange&#x2F;13777796)、<a href="https://baike.baidu.com/item/OpenStreetMap/3171606">OpenStreetMap</a> 、<a href="https://baike.baidu.com/item/SourceForge/6562141">SourceForge</a>、<a href="https://baike.baidu.com/item/%E7%AE%80%E4%B9%A6/5782216">简书</a>等，甚至还能被使用来撰写<a href="https://baike.baidu.com/item/%E7%94%B5%E5%AD%90%E4%B9%A6/346054">电子书</a>。</p></blockquote><hr><h1 id="Markdown基本语法"><a href="#Markdown基本语法" class="headerlink" title="Markdown基本语法"></a>Markdown基本语法</h1><h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><p>在想要设置为标题的文字前面加 # 来表示<br>一个 # 是一级标题，二个 # 是二级标题，以此类推，它支持六级标题。</p><blockquote><p>注意：标准语法是在 # 后加个空格在写文字。</p></blockquote><p>示例：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 这是一级标题<br>## 这是二级标题<br>### 这是三级标题<br>#### 这是四级标题<br>##### 这是五级标题<br>###### 这是六级标题<br></code></pre></td></tr></table></figure><p>效果如下：</p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><hr><h2 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h2><ul><li><p><strong>加粗</strong></p><p>要加粗的文字左右分别用两个 * 号包起来</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">**这是加粗的文字**</span><br></code></pre></td></tr></table></figure></li><li><p><strong>斜体</strong></p><p>用一个 * 号包起来</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">*这是倾斜的文字*</span>`<br></code></pre></td></tr></table></figure></li><li><p><strong>斜体+加粗</strong></p><p>用三个 * 号包起来</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**<span class="hljs-emphasis">*这是斜体加粗的文字*</span>**</span><br></code></pre></td></tr></table></figure></li><li><p><strong>删除线</strong></p><p>用两个 ~ 号包起来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">~~这是加删除线的文字~<br></code></pre></td></tr></table></figure><hr><p>效果如下：</p><p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em>&#96;<br><em><strong>这是斜体加粗的文字</strong></em><br><del>这是加删除线的文字</del></p><hr></li></ul><h2 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h2><p>在引用的文字前加 &gt; 即可。</p><p>引用也可以嵌套，如加两个 &gt;&gt; 三个 &gt;&gt;&gt; 等等</p><blockquote><p>只要你有恒心，就可以一直加下去~~~~~</p></blockquote><p>如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">我是引用的内容</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;我是引用的内容</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;&gt;&gt;&gt;我是引用的内容</span><br></code></pre></td></tr></table></figure><p>效果如下：</p><hr><blockquote><p>我是引用的内容</p><blockquote><p>我是引用的内容</p><blockquote><blockquote><blockquote><blockquote><p>我是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><hr><h2 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h2><p>三个或者三个以上的 - 或者 * 都可以。</p><p>示例：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">---</span><br><span class="hljs-section">----</span><br><span class="hljs-bullet">***</span><br><span class="hljs-bullet"></span><span class="hljs-strong">***</span>*<br></code></pre></td></tr></table></figure><p>效果如下：</p><blockquote><p>可以看戳，显示效果基本一样</p></blockquote><hr><hr><hr><hr><h2 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h2><p>语法：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">![图片alt](图片地址 <span class="hljs-string">&#x27;&#x27;</span>图片titl<span class="hljs-string">e&#x27;&#x27;</span>)<br><br>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加<br></code></pre></td></tr></table></figure><p>示例：</p><p><img src="http://n.sinaimg.cn/sinacn05/793/w1000h1393/20180712/7cc3-hfefkqq6452113.jpg" title="taylor swift"></p><h2 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h2><p>语法：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dos">[超链接名](超链接地址 &quot;超链接<span class="hljs-built_in">title</span>&quot;)<br><span class="hljs-built_in">title</span>可加可不加<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-attr">[微博]</span>(<span class="hljs-attribute">http</span>:<span class="hljs-comment">//weibo.com)</span><br>[百度](<span class="hljs-attribute">http</span>:<span class="hljs-comment">//baidu.com)</span><br>[微信](<span class="hljs-attribute">http</span>:<span class="hljs-comment">//weixin.qq.com)</span><br></code></pre></td></tr></table></figure><p>效果如下：</p><p><a href="http://weibo.com/">微博</a><br>        <a href="http://baidu.com/">百度</a><br>        <a href="http://weixin.qq.com/">微信</a></p><blockquote><p>注：Markdown本身语法不支持链接在新页面中打开</p></blockquote><h2 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h2><h5 id="1-无序列表"><a href="#1-无序列表" class="headerlink" title="1. 无序列表"></a>1. 无序列表</h5><p>语法：无序列表用  -  +  * 任何一种都可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">- 列表内容<br>+ 列表内容<br>* 列表内容<br><br>注意：- + * 跟内容之间都要有一个空格<br></code></pre></td></tr></table></figure><p>效果：</p><ul><li>草莓</li></ul><ul><li>芒果</li></ul><ul><li>荔枝</li></ul><h5 id="2-有序列表"><a href="#2-有序列表" class="headerlink" title="2. 有序列表"></a>2. 有序列表</h5><p>语法：数字加点</p><p>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">1. 列表内容<br>2. 列表内容<br>3. 列表内容<br><br>注意：序号跟内容之间要有空格<br></code></pre></td></tr></table></figure><p>效果：</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><h5 id="3-列表嵌套"><a href="#3-列表嵌套" class="headerlink" title="3. 列表嵌套"></a>3. 列表嵌套</h5><p><strong>上一级和下一级之间敲2个空格即可</strong></p><ul><li>水果   <ul><li>火龙果</li><li>香蕉</li></ul></li></ul><h2 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h2><p>语法：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ruby">表头|<span class="hljs-params">表头</span>|表头<br>---|<span class="hljs-params">:--:</span>|---:<br>内容|<span class="hljs-params">内容</span>|内容<br>内容|<span class="hljs-params">内容</span>|内容<br><br><br>第二行分割表头和内容。<br>- 有一个就行，为了对齐，多加了几个<br>文字默认居左<br>-两边加：表示文字居中<br>-右边加：表示文字居右<br>注：原生的语法两边都要用 |<span class="hljs-params"> 包起来。此处省略</span><br></code></pre></td></tr></table></figure><p>效果：</p><table><thead><tr><th>name</th><th align="center">number</th><th align="right">price</th></tr></thead><tbody><tr><td>apple</td><td align="center">1</td><td align="right">$50</td></tr><tr><td>banana</td><td align="center">2</td><td align="right">$80</td></tr></tbody></table><h2 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h2><p>语法：<br> 单行代码：代码之间分别用一个反引号(&#96;)包起来</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-string">`代码内容`</span><br></code></pre></td></tr></table></figure><p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">(<span class="hljs-string">``</span><span class="hljs-string">`)</span><br><span class="hljs-string">  代码...</span><br><span class="hljs-string">  代码...</span><br><span class="hljs-string">  代码...</span><br><span class="hljs-string">(`</span><span class="hljs-string">``</span>)<br></code></pre></td></tr></table></figure><p>效果：</p><blockquote><p>单行代码    <code>enable: true</code></p></blockquote><blockquote><p>代码块   </p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">post_sticky:</span><br><br><span class="hljs-symbol">enable:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-symbol">icon:</span> <span class="hljs-string">&quot;iconfont icon-top&quot;</span><br></code></pre></td></tr></table></figure></blockquote><h2 id="十、未完待续……"><a href="#十、未完待续……" class="headerlink" title="十、未完待续……."></a>十、未完待续…….</h2>]]></content>
    
    
    <categories>
      
      <category>markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Html5 CSS3提高</title>
    <link href="/2022/06/03/02.%20HTML5&amp;CSS3%E6%8F%90%E9%AB%98/"/>
    <url>/2022/06/03/02.%20HTML5&amp;CSS3%E6%8F%90%E9%AB%98/</url>
    
    <content type="html"><![CDATA[<h1 id="HTML5新特性"><a href="#HTML5新特性" class="headerlink" title="HTML5新特性"></a>HTML5新特性</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h2 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h2><p>发展到了HTML5后，新增了一些语义化标签，这样的话更加有利于浏览器的搜索引擎搜索，也方便了网站的seo（Search Engine Optimization，搜索引擎优化），下面就是新增的一些语义化标签</p><ul><li><code>&lt;header&gt;</code> 头部标签</li><li><code>&lt;nav&gt;</code> 导航标签</li><li><code>&lt;article&gt;</code> 内容标签</li><li><code>&lt;section&gt;</code> 定义文档某个区域</li><li><code>&lt;aside&gt;</code> 侧边栏标签</li><li><code>&lt;footer&gt;</code> 尾部标签</li></ul><h2 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h2><h3 id="视频标签-video"><a href="#视频标签-video" class="headerlink" title="视频标签- video"></a>视频标签- video</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;media/mi.mp4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="video-常用属性"><a href="#video-常用属性" class="headerlink" title="video 常用属性"></a>video 常用属性</h4><ul><li><code>autoplay</code>  自动播放<ul><li>注意： 在google浏览器上面，默认禁止了自动播放，如果想要自动播放的效果，需要设置 muted属性</li></ul></li><li><code>width</code>  宽度</li><li><code>height</code>  高度</li><li><code>loop</code>  循环播放</li><li><code>src</code>  播放源</li><li><code>muted</code> 静音播放</li></ul><p><strong>示例：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;media/mi.mp4&quot;</span> <span class="hljs-attr">autoplay</span>=<span class="hljs-string">&quot;autoplay&quot;</span> <span class="hljs-attr">muted</span>=<span class="hljs-string">&quot;muted&quot;</span>  <span class="hljs-attr">loop</span>=<span class="hljs-string">&quot;loop&quot;</span> <span class="hljs-attr">poster</span>=<span class="hljs-string">&quot;media/mi9.jpg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="音频标签-audio"><a href="#音频标签-audio" class="headerlink" title="音频标签- audio"></a>音频标签- audio</h3><p><strong>使用语法：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;media/music.mp3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>示例代码：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;media/music.mp3&quot;</span> <span class="hljs-attr">autoplay</span>=<span class="hljs-string">&quot;autoplay&quot;</span> <span class="hljs-attr">controls</span>=<span class="hljs-string">&quot;controls&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们可以给视频标签添加 muted 属性来静音播放视频，音频不可以（可以通过JavaScript解决）</p><h2 id="新增的表单元素-（★★）"><a href="#新增的表单元素-（★★）" class="headerlink" title="新增的表单元素 （★★）"></a>新增的表单元素 （★★）</h2><p><strong>案例代码：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 我们验证的时候必须添加form表单域 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>邮箱: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>网址: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;url&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>日期: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;date&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>时间: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;time&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>数量: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>手机号码: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;tel&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>搜索: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;search&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>颜色: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;color&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 当我们点击提交按钮就可以验证表单了 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p> <strong>常见输入类型</strong></p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">text</span> password radio checkbox <span class="hljs-keyword">button</span> <span class="hljs-keyword">file</span> hidden submit reset <span class="hljs-keyword">image</span><br></code></pre></td></tr></table></figure><h2 id="CSS3-新增选择器"><a href="#CSS3-新增选择器" class="headerlink" title="CSS3  新增选择器"></a>CSS3  新增选择器</h2><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"> <span class="hljs-comment">/* 只选择 type =text 文本框的input 选取出来 */</span><br><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=text]</span> &#123;<br>    <span class="hljs-attribute">color</span>: pink;<br>&#125;<br><span class="hljs-comment">/* 选择首先是div 然后 具有class属性 并且属性值 必须是 icon开头的这些元素 */</span><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-attr">[class^=icon]</span> &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>&#125;<br><span class="hljs-comment">/* 选择首先是section 然后 具有class属性 并且属性值 必须是 data结尾的这些元素 */</span><br><span class="hljs-selector-tag">section</span><span class="hljs-selector-attr">[class$=data]</span> &#123;<br>    <span class="hljs-attribute">color</span>: blue;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>注意：</strong>类选择器、属性选择器、伪类选择器，权重为 10。</li></ul><h3 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h3><h4 id="E-first-child"><a href="#E-first-child" class="headerlink" title="E:first-child"></a>E:first-child</h4><p>匹配父元素的第一个子元素E</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">   <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:first</span>-child&#123;</span><br><span class="language-css">     <span class="hljs-attribute">background-color</span>: red;</span><br><span class="language-css">   &#125;</span><br><span class="language-css"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br> <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项二<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项三<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项四<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>E:last-child</strong>  则是选择到了最后一个li标签</p><h4 id="E-nth-child-n"><a href="#E-nth-child-n" class="headerlink" title="E:nth-child(n)"></a>E:nth-child(n)</h4><p>匹配到父元素的第n个元素</p><ul><li><p>匹配到父元素的第2个子元素  </p><p><code>ul li:nth-child(2)&#123;&#125;</code></p></li><li><p>匹配到父元素的序号为奇数的子元素</p><p><code>ul li:nth-child(odd)&#123;&#125;</code>    <strong>odd</strong> 是关键字  奇数的意思（3个字母 ）</p></li><li><p>匹配到父元素的序号为偶数的子元素</p><p><code>ul li:nth-child(even)&#123;&#125;</code>   <strong>even</strong>（4个字母 ）</p></li><li><p><strong>匹配到父元素的前3个子元素</strong></p><p><code>ul li:nth-child(-n+3)&#123;&#125;</code></p></li></ul><h4 id="E-nth-child-与-E-nth-of-type-的区别"><a href="#E-nth-child-与-E-nth-of-type-的区别" class="headerlink" title="E:nth-child 与 E:nth-of-type 的区别"></a>E:nth-child 与 E:nth-of-type 的区别</h4><h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><ul><li>box-sizing: content-box  盒子大小为 width + padding + border  （以前默认的）</li><li>box-sizing: border-box  盒子大小为 width</li></ul><p>如果盒子模型我们改为了box-sizing: border-box  ， 那padding和border就不会撑大盒子了</p><h2 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h2><h3 id="图标变模糊-–-CSS3滤镜filter"><a href="#图标变模糊-–-CSS3滤镜filter" class="headerlink" title="图标变模糊  – CSS3滤镜filter"></a>图标变模糊  – CSS3滤镜filter</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">filter</span>:   函数(); --&gt;  例如： <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">5px</span>);  --&gt;  blur模糊处理  数值越大越模糊<br></code></pre></td></tr></table></figure><h3 id="计算盒子宽度-–-calc-函数"><a href="#计算盒子宽度-–-calc-函数" class="headerlink" title="计算盒子宽度 – calc 函数"></a>计算盒子宽度 – calc 函数</h3><p>calc() 此CSS函数让你在声明CSS属性值时执行一些计算</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100%</span> - <span class="hljs-number">80px</span>);<br></code></pre></td></tr></table></figure><p>括号里面可以使用 + - *  &#x2F; 来进行计算</p><h2 id="CSS3-过渡"><a href="#CSS3-过渡" class="headerlink" title="CSS3 过渡"></a>CSS3 过渡</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transition</span>: 要过渡的属性  花费时间  运动曲线  何时开始;<br></code></pre></td></tr></table></figure><p><strong>记住过渡的使用口诀： 谁做过渡给谁加</strong></p><h3 id="广义H5"><a href="#广义H5" class="headerlink" title="广义H5"></a>广义H5</h3><ul><li>广义的 HTML5 是 HTML5 本身 + CSS3 + JavaScript 。</li><li>这个集合有时称为 HTML5 和朋友，通常缩写为 HTML5 。</li></ul>]]></content>
    
    
    <categories>
      
      <category>html</category>
      
    </categories>
    
    
    <tags>
      
      <tag>html</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/06/01/hello-world/"/>
    <url>/2022/06/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
